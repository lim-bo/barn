//protoc --go_out=paths=source_relative:./internal/services/pb --go-grpc_out=paths=source_relative:./internal/services/pb --grpc-gateway_out=paths=source_relative:./internal/services/pb -I./proto  proto/services.proto
//protoc --grpc-gateway_out=paths=source_relative:./internal/services/pb -I./proto proto/services.proto
syntax = "proto3";
package s3;
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/api/httpbody.proto";
option go_package = "github.com/lim-bo/barn/internal/services/pb";
// Messages
message Bucket {
    string id = 1;
    string name = 2;
    string owner_id = 3;
    string created_at = 4;
}

message UserCredentials {
    string username = 1;
    string password = 2;
}

message Keys {
    string access_key = 1;
    string secret_key = 2;
}

message ObjectInfo {
    string key = 1;
    int64 size = 2;
    string etag = 3;
    string last_modified = 4;
}

// Services


// Buckets managing service. All methods requires authorization via AuthInterceptor 
// which provides uid for core logic (look for implementation in code (internal/services))
service BucketService {
    // Creates bucket with given name. HTTP: name provided in path-values.
    // Returns bucket's info.
    rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse) {
        option (google.api.http) = {
            put: "/{name}"
            response_body: "bucket"
        };
    }

    // Lists buckets owned by user. HTTP: returns json array
    rpc ListAllBuckets(ListAllBucketsRequest) returns (ListAllBucketsResponse) {
        option (google.api.http) = {
            get: "/"
            response_body: "buckets"
        };
    }

    // Deletes bucket by given name. HTTP: name provided in path-values.
    rpc DeleteBucket(DeleteBucketRequest) returns (DeleteBucketResponse) {
        option (google.api.http) = {
            delete: "/{name}"
        };
    }

    // Looks for bucket with given name. If there is no bucket, returns error (NotFound)
    // otherwise returns nil error. HTTP: HEAD request returns 200 or 404.
    rpc CheckExistBucket(CheckExistBucketRequest) returns (CheckExistBucketResponse) {
        option (google.api.http) = {
           custom: {
            kind: "HEAD"
            path: "/{name}"
           }
        };
    }
}

message CheckExistBucketRequest {
    string name = 1;
}

message CheckExistBucketResponse {}

message ListAllBucketsRequest {}

message ListAllBucketsResponse {
    repeated Bucket buckets = 1;
}

message CreateBucketRequest {
    string name = 1;
}

message CreateBucketResponse {
    Bucket bucket = 1;
}

message DeleteBucketRequest {
    string name = 1;
}

message DeleteBucketResponse {}

// Users' authentication managing service.
service AuthService {
    // Registers new user and returns its access-key, secret-key pair.
    rpc RegisterWithKeys(google.protobuf.Empty) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/auth/register"
            response_body: "keys"
        };
    }
    // Register new user with given credentials (username and password) and
    // returns access-secret keys.
    rpc RegisterWithPassword(RegisterWithPasswordRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/auth/register-pass"
            body: "credentials"
            response_body: "keys"
        };
    }
    // Recieves credentials (username and password) and returns user's access-key
    // and renewed secret-key
    rpc LoginWithPassword(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/auth/login"
            body: "credentials"
            response_body: "keys"
        };
    }
}

message RegisterWithPasswordRequest { 
    UserCredentials credentials = 1;
}

message RegisterResponse {
    Keys keys = 1;
}

message LoginRequest {
    UserCredentials credentials = 1;
}

message LoginResponse {
    Keys keys = 1;
}

service ObjectService {
    // Recieves bucket, key and new object's data, returns file's etag.
    // HTTP: recieves PUT in /{bucket}/key route with application/octet-stream file data
    rpc LoadObject(LoadObjectRequest) returns (LoadObjectResponse) {
    }

    // Returns object's data by bucket and key. HTTP: returns application/octet-stream content
    rpc GetObject(GetObjectRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/{bucket}/{key}"
        };
    }

    // Provides object's size, etag, last-modified data in metadata response.
    // Headers:
    //  size: "content-lenght"
    //  etag: "etag"
    //  last-modified: "last-modified"
    // HTTP: returns 200 and metadata in response headers or error
    rpc GetObjectMD(ObjectInfoRequest) returns (ObjectInfoResponse) {
        option (google.api.http) = {
            custom: {
                kind: "HEAD"
                path: "/{bucket}/{key}"
           }
        };
    }

    // Deletes object in bucket with given key.
    rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse) {
        option (google.api.http) = {
            delete: "/{bucket}/{key}"
        };
    }

    // Returns list of bucket's objects with given limit and offset.
    // HTTP: limit and offset should be provided by query-params, if necessary
    rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse) {
        option (google.api.http) = {
            get: "/{bucket}"
            response_body: "*"
        };
    }
}

message LoadObjectRequest {
    string bucket = 1;
    string key = 2;
    google.api.HttpBody body = 3;
}

message LoadObjectResponse {
    string etag = 1;
}

message GetObjectRequest {
    string bucket = 1;
    string key = 2;
}

message GetObjectResponse {
    bytes data = 1;
}

message ObjectInfoRequest {
    string bucket = 1;
    string key = 2;
}

message ObjectInfoResponse {}

message DeleteObjectRequest {
    string bucket = 1;
    string key = 2;
}

message DeleteObjectResponse {}

message ListObjectsRequest {
    string bucket = 1;
    int32 limit = 2;
    int32 offset = 3;
}

message ListObjectsResponse {
    string bucket = 1;
    int32 count = 2;
    int32 limit = 3;
    int32 offset = 4;
    repeated ObjectInfo content = 5;
}